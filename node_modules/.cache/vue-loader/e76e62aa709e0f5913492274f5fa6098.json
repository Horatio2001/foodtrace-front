{"remainingRequest":"/Users/horatio/WebstormProjects/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/horatio/WebstormProjects/vue-admin-template/src/views/resource/collectInfo/index.vue?vue&type=style&index=0&id=91970458&lang=css&","dependencies":[{"path":"/Users/horatio/WebstormProjects/vue-admin-template/src/views/resource/collectInfo/index.vue","mtime":1682756024720},{"path":"/Users/horatio/WebstormProjects/vue-admin-template/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/horatio/WebstormProjects/vue-admin-template/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/horatio/WebstormProjects/vue-admin-template/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/horatio/WebstormProjects/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/horatio/WebstormProjects/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYnV0dG9uLWdyb3VwIHsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKLmJ1dHRvbi1ncm91cCAuZWwtYnV0dG9uIHsKICBjb2xvcjogIzQwOUVGRjsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAydA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/resource/collectInfo","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"listQuery.title\" placeholder=\"Title\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-select v-model=\"listQuery.importance\" placeholder=\"Imp\" clearable style=\"width: 90px\" class=\"filter-item\">\n        <el-option v-for=\"item in importanceOptions\" :key=\"item\" :label=\"item\" :value=\"item\" />\n      </el-select>\n      <el-select v-model=\"listQuery.type\" placeholder=\"Type\" clearable class=\"filter-item\" style=\"width: 130px\">\n        <el-option v-for=\"item in calendarTypeOptions\" :key=\"item.key\" :label=\"item.display_name+'('+item.key+')'\" :value=\"item.key\" />\n      </el-select>\n      <el-select v-model=\"listQuery.sort\" style=\"width: 140px\" class=\"filter-item\" @change=\"handleFilter\">\n        <el-option v-for=\"item in sortOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n      </el-select>\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Add\n      </el-button>\n      <el-button v-waves :loading=\"downloadLoading\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-download\" @click=\"handleDownload\">\n        Export\n      </el-button>\n      <el-checkbox v-model=\"showReviewer\" class=\"filter-item\" style=\"margin-left:15px;\" @change=\"tableKey=tableKey+1\">\n        reviewer\n      </el-checkbox>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column label=\"收集号\" prop=\"collectID\" sortable=\"custom\" align=\"center\" width=\"80\" :class-name=\"getSortClass('id')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.collectID }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"流程状态\" prop=\"status\" class-name=\"status-col\" width=\"100\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.status | statusFilter\">\n            <span v-if=\"row.status === 0\">待保存</span>\n            <span v-else-if=\"row.status === 1\">待录入</span>\n            <span v-else-if=\"row.status === 2\">待共享</span>\n            <span v-else-if=\"row.status === 3\">已共享</span>\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"作物类别\" prop=\"type\" align=\"center\" width=\"110\">\n        <template slot-scope=\"{row}\">\n          <span v-if=\"row.type === 1\">产胶作物</span>\n          <span v-else-if=\"row.type === 2\">热带果树</span>\n          <span v-else-if=\"row.type === 3\">热带牧草</span>\n          <span v-else-if=\"row.type === 4\">热带粮食作物</span>\n          <span v-else-if=\"row.type === 5\">热带药用作物</span>\n          <span v-else-if=\"row.type === 6\">热带油料作物</span>\n          <span v-else-if=\"row.type === 7\">热带香辛饮料作物</span>\n          <span v-else-if=\"row.type === 8\">热带花卉</span>\n          <span v-else-if=\"row.type === 9\">热带纤维植物</span>\n          <span v-else-if=\"row.type === 10\">热带特种蔬菜</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"作物名称\" prop=\"name\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.name }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"种质名称\" prop=\"germplasmName\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.germplasmName }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"科名\" prop=\"sectionName\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.sectionName }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"属名\" prop=\"genericName\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.genericName }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"学名\" prop=\"scientificName\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.scientificName }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"种质资源类型\" prop=\"resourceType\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.resourceType }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"收集方式\" prop=\"collectMethod\"  align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.collectMethod }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"收集人\" prop=\"collectPeople\"  align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.collectPeople }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"收集单位\" prop=\"collectUnit\"  align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.collectUnit }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"原生境图片\" prop=\"image\"  align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.image }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"项目归口\" prop=\"speciesName\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            {{ row.speciesName }}\n          </span>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"操作状态\" prop=\"idContradict\" class-name=\"status-col\" width=\"100\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.isContradict | contadictFilter\">\n            <span v-if=\"row.isContradict === 0\">正常</span>\n            <span v-else-if=\"row.isContradict === 1\">反驳中</span>\n          </el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"操作员\" prop=\"type\" sortable=\"custom\" align=\"center\" width=\"80\">\n        <template slot-scope=\"{row}\">\n          <span>\n            admin\n          </span>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"操作\" align=\"center\" width=\"230\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row}\">\n          <button-group class=\"button-group\" :row=\"row\"></button-group>\n        </template>\n      </el-table-column>\n\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\n\n<!--    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">-->\n<!--      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"70px\" style=\"width: 400px; margin-left:50px;\">-->\n<!--        <el-form-item label=\"Type\" prop=\"type\">-->\n<!--          <el-select v-model=\"temp.type\" class=\"filter-item\" placeholder=\"Please select\">-->\n<!--            <el-option v-for=\"item in calendarTypeOptions\" :key=\"item.key\" :label=\"item.display_name\" :value=\"item.key\" />-->\n<!--          </el-select>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"Date\" prop=\"timestamp\">-->\n<!--          <el-date-picker v-model=\"temp.timestamp\" type=\"datetime\" placeholder=\"Please pick a date\" />-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"Title\" prop=\"title\">-->\n<!--          <el-input v-model=\"temp.title\" />-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"Status\">-->\n<!--          <el-select v-model=\"temp.status\" class=\"filter-item\" placeholder=\"Please select\">-->\n<!--            <el-option v-for=\"item in statusOptions\" :key=\"item\" :label=\"item\" :value=\"item\" />-->\n<!--          </el-select>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"Imp\">-->\n<!--          <el-rate v-model=\"temp.importance\" :colors=\"['#99A9BF', '#F7BA2A', '#FF9900']\" :max=\"3\" style=\"margin-top:8px;\" />-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"Remark\">-->\n<!--          <el-input v-model=\"temp.remark\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />-->\n<!--        </el-form-item>-->\n<!--      </el-form>-->\n<!--      <div slot=\"footer\" class=\"dialog-footer\">-->\n<!--        <el-button @click=\"dialogFormVisible = false\">-->\n<!--          Cancel-->\n<!--        </el-button>-->\n<!--        <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">-->\n<!--          Confirm-->\n<!--        </el-button>-->\n<!--      </div>-->\n<!--    </el-dialog>-->\n\n<!--    <el-dialog :visible.sync=\"dialogPvVisible\" title=\"Reading statistics\">-->\n<!--      <el-table :data=\"pvData\" border fit highlight-current-row style=\"width: 100%\">-->\n<!--        <el-table-column prop=\"key\" label=\"Channel\" />-->\n<!--        <el-table-column prop=\"pv\" label=\"Pv\" />-->\n<!--      </el-table>-->\n<!--      <span slot=\"footer\" class=\"dialog-footer\">-->\n<!--        <el-button type=\"primary\" @click=\"dialogPvVisible = false\">Confirm</el-button>-->\n<!--      </span>-->\n<!--    </el-dialog>-->\n  </div>\n</template>\n\n<script>\nimport { fetchList, fetchPv, createArticle, updateArticle } from '@/api/article'\nimport { fetchCollectionListByPage , fetchCollectionTotal} from '@/api/collectInfo'\n\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination'\nimport ButtonGroup from '@/views/resource/collectInfo/components/ButtonGroup.vue' // secondary package based on el-pagination\n\nconst calendarTypeOptions = [\n  { key: 'CN', display_name: 'China' },\n  { key: 'US', display_name: 'USA' },\n  { key: 'JP', display_name: 'Japan' },\n  { key: 'EU', display_name: 'Eurozone' }\n]\n\n// arr to obj, such as { CN : \"China\", US : \"USA\" }\nconst calendarTypeKeyValue = calendarTypeOptions.reduce((acc, cur) => {\n  acc[cur.key] = cur.display_name\n  return acc\n}, {})\n\nexport default {\n  name: 'ComplexTable',\n  components: { ButtonGroup, Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        0: 'primary',\n        1: 'success',\n        2: 'warning',\n        3: 'danger',\n      }\n      return statusMap[status]\n    },\n    contadictFilter(status) {\n      const statusMap = {\n        0: 'success',\n        1: 'danger',\n      }\n      return statusMap[status]\n    },\n    // statusFilter(status) {\n    //   const statusMap = {\n    //     published: 'success',\n    //     draft: 'info',\n    //     deleted: 'danger'\n    //   }\n    //   return statusMap[status]\n    // },\n    typeFilter(type) {\n      return calendarTypeKeyValue[type]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 20,\n        importance: undefined,\n        title: undefined,\n        type: undefined,\n        sort: '+id'\n      },\n      importanceOptions: [1, 2, 3],\n      calendarTypeOptions,\n      sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],\n      statusOptions: ['collect','save','enter','share'],\n      showReviewer: false,\n      temp: {\n        id: undefined,\n        importance: 1,\n        remark: '',\n        timestamp: new Date(),\n        title: '',\n        type: '',\n        status: 'published'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      dialogPvVisible: false,\n      pvData: [],\n      rules: {\n        type: [{ required: true, message: 'type is required', trigger: 'change' }],\n        timestamp: [{ type: 'date', required: true, message: 'timestamp is required', trigger: 'change' }],\n        title: [{ required: true, message: 'title is required', trigger: 'blur' }]\n      },\n      downloadLoading: false\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      fetchCollectionListByPage(this.listQuery.page, this.listQuery.limit).then(response=>{\n        this.list = response.data\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n      fetchCollectionTotal().then(response=>{\n        this.total = response.data\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    handleModifyStatus(row, status) {\n      this.$message({\n        message: '操作Success',\n        type: 'success'\n      })\n      row.status = status\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    resetTemp() {\n      this.temp = {\n        id: undefined,\n        importance: 1,\n        remark: '',\n        timestamp: new Date(),\n        title: '',\n        status: 'published',\n        type: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.temp.id = parseInt(Math.random() * 100) + 1024 // mock a id\n          this.temp.author = 'vue-element-admin'\n          createArticle(this.temp).then(() => {\n            this.list.unshift(this.temp)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.temp.timestamp = new Date(this.temp.timestamp)\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const tempData = Object.assign({}, this.temp)\n          tempData.timestamp = +new Date(tempData.timestamp) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464\n          updateArticle(tempData).then(() => {\n            const index = this.list.findIndex(v => v.id === this.temp.id)\n            this.list.splice(index, 1, this.temp)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      this.$notify({\n        title: 'Success',\n        message: 'Delete Successfully',\n        type: 'success',\n        duration: 2000\n      })\n      this.list.splice(index, 1)\n    },\n    handleFetchPv(pv) {\n      fetchPv(pv).then(response => {\n        this.pvData = response.data.pvData\n        this.dialogPvVisible = true\n      })\n    },\n    handleDownload() {\n      this.downloadLoading = true\n      import('@/vendor/Export2Excel').then(excel => {\n        const tHeader = ['timestamp', 'title', 'type', 'importance', 'status']\n        const filterVal = ['timestamp', 'title', 'type', 'importance', 'status']\n        const data = this.formatJson(filterVal)\n        excel.export_json_to_excel({\n          header: tHeader,\n          data,\n          filename: 'table-list'\n        })\n        this.downloadLoading = false\n      })\n    },\n    formatJson(filterVal) {\n      return this.list.map(v => filterVal.map(j => {\n        if (j === 'timestamp') {\n          return parseTime(v[j])\n        } else {\n          return v[j]\n        }\n      }))\n    },\n    getSortClass: function(key) {\n      const sort = this.listQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n\n<style>\n.button-group {\n  justify-content: center;\n}\n\n.button-group .el-button {\n  color: #409EFF;\n  background-color: transparent;\n  border-color: transparent;\n}\n</style>\n"]}]}